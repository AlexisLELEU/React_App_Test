{"ast":null,"code":"var _jsxFileName = \"/Users/alexis/Desktop/React_App_Test/src/container/Article-list.js\";\nimport React, { Component } from 'react';\nimport ArticleListItem from '../components/Article-list-item';\nimport { API_URL, METHODS, LIMIT } from '../Constants';\nimport AddPost from './AddPost';\n\nclass ArticleList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/posts\").concat(LIMIT));\n      const json = await response.json();\n      this.setState({\n        data: json\n      });\n    } catch (error) {\n      console.log(\"ERROR\" + error);\n    }\n  }\n\n  async handleClick(index) {\n    const data = this.state.data;\n    const response = await fetch(\"\".concat(API_URL, \"/posts/\").concat(index), {\n      method: METHODS.delete\n    });\n\n    if (response.status === 200) {\n      const filterData = data.filter(item => item.id !== index);\n      this.setState({\n        data: filterData\n      });\n    }\n  }\n\n  async _addArticle(body) {\n    try {\n      const response = await fetch(\"\".concat(API_URL, \"/posts\"), {\n        method: METHODS.post,\n        body: JSON.stringify({\n          userId: 1,\n          title: body.title,\n          body: body.body\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      });\n      const json = await response.json();\n      this.setState({\n        data: [...this.state.data, json]\n      });\n    } catch (error) {\n      console.log(\"ERROR: \" + error);\n    }\n  } //   _addArticle = body => {\n  //     fetch(`\b${API_URL}/posts`, {\n  //   method: 'POST',\n  //   body: JSON.stringify({\n  //     userId: 1,\n  //     title: body.title,\n  //     body: body.body\n  //   }),\n  //   headers: {\n  //     \"Content-type\": \"application/json; charset=UTF-8\"\n  //   }\n  // })\n  // .then(response => response.json())\n  // .then(json => this.setState({\n  //         data: [...this.state.data, json]\n  //       }))\n  //   }\n\n\n  render() {\n    if (this.state.data !== []) {\n      return React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(AddPost, {\n        addArticle: this._addArticle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        className: \"dataList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, console.log(this.state.data), this.state.data.map(el => React.createElement(ArticleListItem, {\n        key: el.id,\n        title: el.title,\n        body: el.body,\n        onClick: () => this.handleClick(el.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }))));\n    }\n  }\n\n}\n\nexport default ArticleList;","map":{"version":3,"sources":["/Users/alexis/Desktop/React_App_Test/src/container/Article-list.js"],"names":["React","Component","ArticleListItem","API_URL","METHODS","LIMIT","AddPost","ArticleList","constructor","props","state","data","handleClick","bind","componentDidMount","response","fetch","json","setState","error","console","log","index","method","delete","status","filterData","filter","item","id","_addArticle","body","post","JSON","stringify","userId","title","headers","render","map","el"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport ArticleListItem from '../components/Article-list-item'\n\nimport {API_URL, METHODS, LIMIT} from '../Constants'\nimport AddPost from './AddPost';\n\n\nclass ArticleList extends Component {\n\n\n    constructor(props){\n        super(props)\n        this.state = {\n          data: []\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n\n    async componentDidMount () {\n      try{\n        const response = await fetch (`${API_URL}/posts${LIMIT}`);\n        const json = await response.json();\n        this.setState({data: json})\n      } catch (error){\n        console.log(\"ERROR\" + error)\n      }\n    }\n\n    async handleClick(index) {\n      const { data } = this.state;\n      const response = await fetch(`${API_URL}/posts/${index}` , {\n        method: METHODS.delete\n      });\n      \n      if (response.status === 200) {\n        const filterData = data.filter(item => item.id !== index);\n  \n        this.setState({\n          data: filterData\n        });\n      }\n    }\n\n    async _addArticle(body) {\n      try {\n        const response = await fetch(`${API_URL}/posts`, {\n        method: METHODS.post,\n        body: JSON.stringify({\n          userId: 1,\n          title: body.title,\n          body: body.body\n        }),\n        headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      })\n      const json = await response.json()\n        this.setState({\n          data: [...this.state.data, json]\n        })\n      } catch (error){\n        console.log(\"ERROR: \" + error)\n      }\n    }\n\n  //   _addArticle = body => {\n  //     fetch(`\b${API_URL}/posts`, {\n  //   method: 'POST',\n  //   body: JSON.stringify({\n  //     userId: 1,\n  //     title: body.title,\n  //     body: body.body\n  //   }),\n  //   headers: {\n  //     \"Content-type\": \"application/json; charset=UTF-8\"\n  //   }\n  // })\n  // .then(response => response.json())\n  // .then(json => this.setState({\n  //         data: [...this.state.data, json]\n  //       }))\n\n  //   }\n  \n\n    render() {\n      \n    if(this.state.data !== []){\n      return (\n        \n        \n        <div className=''>\n          <AddPost addArticle={this._addArticle}/>\n          <ul className='dataList'>\n            {console.log(this.state.data)}\n              {this.state.data.map(el => (\n                  <ArticleListItem \n                    key={el.id} \n                    title={el.title} \n                    body={el.body} \n                    onClick={() => this.handleClick(el.id)}\n                  />\n              ))}\n            </ul>    \n        </div>\n      )\n    }\n  }\n}\n\nexport default ArticleList\n\n\n\n\n  "]},"metadata":{},"sourceType":"module"}